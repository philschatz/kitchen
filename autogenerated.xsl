<?xml version="1.0" encoding="UTF-8"?>
<!--This file is autogenerated. DO NOT EDIT.-->
<xsl:transform xmlns="http://www.w3.org/1999/xhtml"
               xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
               xmlns:xs="http://www.w3.org/2001/XMLSchema"
               xmlns:fn="http://www.w3.org/2005/xpath-functions"
               xmlns:h="http://www.w3.org/1999/xhtml"
               xmlns:r="urn:replacer-xml"
               xmlns:temp="urn:temp-placeholder-element"
               xmlns:func="urn:temp-functions-defined-in-here"
               expand-text="yes"
               version="3.0"
               exclude-result-prefixes="h r xs fn temp func">
   <xsl:output method="xhtml" html-version="5"/>
   <xsl:mode use-accumulators="#all"/>
   <xsl:key name="link-target" match="*" use="@id"/>
   <xsl:key name="internal-id" match="*" use="@temp:id"/>
   <xsl:key name="internal-parent" match="*" use="@temp:parent"/>
   <xsl:key name="link-source" match="h:a" use="@href"/>
   <!--
            ===============================
            Explanation of the modes; they run in order:
            INITIALIZE_MODE: adds a unique @temp:id and @temp:parent to each element to support  r:link to="child"
            ANNOTATE_MODE: adds a unique @temp:replace-id to each element that is matched because the element may move so the selector will no longer apply
                (maybe this can be combined with INITIALIZE_MODE)
            EXPAND_MODE: replaces the current element with the elements defined in r:replace but does not evaluate any of the dump-counter or dump-bucket.
            MOVE_MODE: dumps the elements in the buckets out so they are now in the content
            NUMBER_MODE: dumps the counters out (which result in things being counted) and stores the target link text for an element (e.g. "Figure 4.3")
            LINK_MODE: populates links with autogenerated text based on what the target is
            ENSURE_ID_MODE: ensures that all elements have an id (especially for the lnik targets)
            ERASE_ID_MODE: removes any autogenerated ids that are not link targets           
            CLEANUP_MODE: remove temporary attributes on elements
            ===============================/
        -->
   <xsl:template match="/">
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="INITIALIZE_MODE" select="@*|node()"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="ANNOTATE_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="ENSURE_ID_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="EXPAND_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="MOVE_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="NUMBER_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="LINK_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="ERASE_ID_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:variable name="pipe">
         <xsl:apply-templates mode="CLEANUP_MODE" select="$pipe"/>
      </xsl:variable>
      <xsl:sequence select="$pipe"/>
   </xsl:template>
   <xsl:accumulator name="solutionBucket" initial-value="()">
      <xsl:accumulator-rule match="//h:body" select="()"/>
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution']"
                            select="$value union ."/>
   </xsl:accumulator>
   <xsl:accumulator name="iamapagebucket-key-equations" initial-value="()">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="()"/>
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']//*[@class='key-equations']"
                            select="$value union ."/>
   </xsl:accumulator>
   <xsl:accumulator name="iamapagebucket-summary" initial-value="()">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="()"/>
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']//*[@class='summary']"
                            select="$value union ."/>
   </xsl:accumulator>
   <xsl:accumulator name="iamapagebucket-exercises" initial-value="()">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="()"/>
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']//*[@class='exercises']"
                            select="$value union ."/>
   </xsl:accumulator>
   <xsl:accumulator name="chapterCounter" initial-value="0">
      <xsl:accumulator-rule match="//h:body" select="0"/>
      <xsl:accumulator-rule match="*[@data-type='chapter']" select="$value + 1"/>
   </xsl:accumulator>
   <xsl:accumulator name="sectionCounter" initial-value="0">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="0"/>
      <xsl:accumulator-rule match="*[@data-type='page']" select="$value + 1"/>
   </xsl:accumulator>
   <xsl:accumulator name="exerciseCounter" initial-value="0">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="0"/>
      <xsl:accumulator-rule match="*[@data-type='exercise']" select="$value + 1"/>
   </xsl:accumulator>
   <xsl:accumulator name="figureCounter" initial-value="0">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="0"/>
      <xsl:accumulator-rule match="h:figure" select="$value + 1"/>
   </xsl:accumulator>
   <xsl:accumulator name="tableCounter" initial-value="0">
      <xsl:accumulator-rule match="//h:body//*[@data-type='chapter']" select="0"/>
      <xsl:accumulator-rule match="h:table" select="$value + 1"/>
   </xsl:accumulator>
   <xsl:template mode="ANNOTATE_MODE" match="//h:body">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e4</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e4' is actually: //h:body-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e4']">
      <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
         <div data-type="composite-chapter"
              data-uuid-key=".solution"
              class="os-eob os-solution-container">
            <h1 data-type="document-title">
               <span class="os-text">Answer Key</span>
            </h1>
            <r:dump-bucket temp:id="DUMP_BUCKET_solutionBucket_d1e25"
                           name="solutionBucket"
                           group-by="*[@data-type='chapter']"
                           group-by-title="./*[@data-type='document-title']"/>
         </div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE" match="//h:body">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e4']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="exerciseCounter"/>
      <xsl:param tunnel="yes" name="tableCounter"/>
      <xsl:param tunnel="yes" name="figureCounter"/>
      <xsl:param tunnel="yes" name="sectionCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="h:body"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE" match="//h:body//*[@data-type='chapter']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e29</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e29' is actually: //h:body//*[@data-type='chapter']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e29']">
         <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:link-text>Chapter <r:dump-counter name="chapterCounter"/>
         </r:link-text>
         <h2>Chapter <r:dump-counter name="chapterCounter"/>
         </h2>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
         <div data-type2-because-bug="page" data-uuid-key=".key-equations">
            <h2>Key Equations</h2>
            <r:dump-bucket temp:id="DUMP_BUCKET_iamapagebucket-key-equations_d1e67"
                           name="iamapagebucket-key-equations"/>
         </div>
         <div data-type2-because-bug="page" data-uuid-key=".summary">
            <h2>Summary</h2>
            <r:dump-bucket temp:id="DUMP_BUCKET_iamapagebucket-summary_d1e74"
                           name="iamapagebucket-summary"
                           group-by="*[@data-type='page']"
                           group-by-title="./*[@data-type='document-title']"/>
         </div>
         <div data-type2-because-bug="page" data-uuid-key=".exercises">
            <h2>Exercises</h2>
            <r:dump-bucket temp:id="DUMP_BUCKET_iamapagebucket-exercises_d1e81"
                           name="iamapagebucket-exercises"
                           group-by="*[@data-type='page']"
                           group-by-title="./*[@data-type='document-title']"/>
         </div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE" match="//h:body//*[@data-type='chapter']">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e29']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="exerciseCounter"/>
      <xsl:param tunnel="yes" name="tableCounter"/>
      <xsl:param tunnel="yes" name="figureCounter"/>
      <xsl:param tunnel="yes" name="sectionCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='chapter']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='key-equations']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e85</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e85' is actually: //h:body//*[@data-type='chapter']//*[@class='key-equations']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e85']"><!--TODO: BUG: Unwrap the section and remove the title-->
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="data-todo">UNWRAPME</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <!--r:children selector="node()[not(self::*[@data-type='title'])]"-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()[not(self::*[@data-type='title'])]"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='key-equations']">
      <xsl:comment>Moved "//h:body//*[@data-type='chapter']//*[@class='key-equations']" because it had a @move-to</xsl:comment>
      <xsl:message>Removing element //h:body//*[@data-type='chapter']//*[@class='key-equations'] because it has a @move-to</xsl:message>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e85']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@class='key-equations']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='summary']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e94</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e94' is actually: //h:body//*[@data-type='chapter']//*[@class='summary']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e94']"><!--TODO: BUG: Unwrap the section and remove the title-->
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="data-todo">UNWRAPME</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <!--r:children selector="node()[not(self::*[@data-type='title'])]"-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()[not(self::*[@data-type='title'])]"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='summary']">
      <xsl:comment>Moved "//h:body//*[@data-type='chapter']//*[@class='summary']" because it had a @move-to</xsl:comment>
      <xsl:message>Removing element //h:body//*[@data-type='chapter']//*[@class='summary'] because it has a @move-to</xsl:message>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e94']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@class='summary']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='exercises']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e103</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e103' is actually: //h:body//*[@data-type='chapter']//*[@class='exercises']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e103']"><!--TODO: BUG: Unwrap the section and remove the title-->
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="data-todo">UNWRAPME</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <!--r:children selector="node()[not(self::*[@data-type='title'])]"-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()[not(self::*[@data-type='title'])]"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@class='exercises']">
      <xsl:comment>Moved "//h:body//*[@data-type='chapter']//*[@class='exercises']" because it had a @move-to</xsl:comment>
      <xsl:message>Removing element //h:body//*[@data-type='chapter']//*[@class='exercises'] because it has a @move-to</xsl:message>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e103']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@class='exercises']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e113</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e113' is actually: //h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e113']">
            <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:link-text>
            <r:dump-counter name="chapterCounter"/>.<r:dump-counter name="exerciseCounter"/>
         </r:link-text>
         <r:link to="child" temp:child-link-key="*[@data-type=#solution#]">
            <r:dump-counter name="exerciseCounter"/>
         </r:link>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e113']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="exerciseCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='exercise'][*[@data-type='solution']]"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e135</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e135' is actually: //h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e135']">
               <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:link to="parent"/>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution']">
      <xsl:comment>Moved "//h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution']" because it had a @move-to</xsl:comment>
      <xsl:message>Removing element //h:body//*[@data-type='chapter']//*[@data-type='exercise'][*[@data-type='solution']]//*[@data-type='solution'] because it has a @move-to</xsl:message>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e135']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='solution']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][not(*[@data-type='solution'])]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e146</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e146' is actually: //h:body//*[@data-type='chapter']//*[@data-type='exercise'][not(*[@data-type='solution'])]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e146']">
            <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:link-text>
            <r:dump-counter name="chapterCounter"/>.<r:dump-counter name="exerciseCounter"/>
         </r:link-text>
         <strong>
            <r:dump-counter name="exerciseCounter"/>
         </strong>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='exercise'][not(*[@data-type='solution'])]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e146']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="exerciseCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='exercise'][not(*[@data-type='solution'])]"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE" match="//h:body//*[@data-type='chapter']//h:table">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e169</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e169' is actually: //h:body//*[@data-type='chapter']//h:table-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e169']">
      <div class="os-table">
         <div class="os-caption-container">
            <h:span xmlns:g="urn:recipe-config-xml" class="os-title-label">Table </h:span>
            <h:span xmlns:g="urn:recipe-config-xml" class="os-number">
               <r:dump-counter name="chapterCounter"/>.<r:dump-counter name="tableCounter"/>
            </h:span>
            <h:span xmlns:g="urn:recipe-config-xml" class="os-divider"> </h:span>
            <!--r:children selector="h:caption/node()"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="h:caption/node()"/>
         </div>
         <!--r:this-->
         <xsl:copy>
            <xsl:attribute name="class">top-titled</xsl:attribute>
            <xsl:apply-templates select="@*"/>
            <!--r:children selector="node()[not(self::h:caption)]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="node()[not(self::h:caption)]"/>
         </xsl:copy>
      </div>
   </xsl:template>
   <xsl:template mode="MOVE_MODE" match="//h:body//*[@data-type='chapter']//h:table">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e169']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="tableCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="h:table"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//h:figure">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e198</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e198' is actually: //h:body//*[@data-type='chapter']//h:figure-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e198']">
      <div class="os-figure">
         <div class="os-caption-container">
                  <!--r:children selector="h:figcaption"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="h:figcaption"/>
         </div>
         <!--r:this-->
         <xsl:copy>
            <xsl:apply-templates select="@*"/>
            <!--r:children selector="node()[not(self::h:figcaption)]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="node()[not(self::h:figcaption)]"/>
         </xsl:copy>
      </div>
   </xsl:template>
   <xsl:template mode="MOVE_MODE" match="//h:body//*[@data-type='chapter']//h:figure">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e198']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="figureCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="h:figure"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//h:figure//h:figcaption">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e213</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e213' is actually: //h:body//*[@data-type='chapter']//h:figure//h:figcaption-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e213']">
               <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <strong>
            <h:span class="os-title-label">Figure </h:span>
            <h:span class="os-number">
               <r:dump-counter name="chapterCounter"/>.<r:dump-counter name="figureCounter"/>
            </h:span>
            <h:span class="os-divider"> </h:span>
         </strong>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//h:figure//h:figcaption">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e213']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="figureCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="h:figcaption"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'link-to-learning')]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e238</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e238' is actually: //h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'link-to-learning')]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e238']">
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="class">os-note link-to-learning</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <h:h6 data-type="title" class="os-note-title">Link to Learning</h:h6>
         <h:div class="os-note-body">
                  <!--r:children selector="*[not(@data-type='title')]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="*[not(@data-type='title')]"/>
         </h:div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'link-to-learning')]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e238']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='note']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'sciences-interconnect')]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e252</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e252' is actually: //h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'sciences-interconnect')]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e252']">
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="class">os-note sciences-interconnect</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <h:h6 data-type="title" class="os-note-title">How Sciences Interconnect</h:h6>
         <h:div class="os-note-body">
                  <!--r:children selector="*[not(@data-type='title')]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="*[not(@data-type='title')]"/>
         </h:div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'sciences-interconnect')]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e252']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='note']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'chemist-portrait')]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e267</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e267' is actually: //h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'chemist-portrait')]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e267']">
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="class">os-note chemist-portrait</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <h:h6 data-type="title" class="os-note-title">Portrait of a Chemist</h:h6>
         <h:div class="os-note-body">
                  <!--r:children selector="*[not(@data-type='title')]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="*[not(@data-type='title')]"/>
         </h:div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'chemist-portrait')]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e267']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='note']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'everyday-life')]">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e281</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e281' is actually: //h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'everyday-life')]-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e281']">
            <!--r:this-->
      <xsl:copy>
         <xsl:attribute name="class">os-note everyday-life</xsl:attribute>
         <xsl:apply-templates select="@*"/>
         <h:h6 data-type="title" class="os-note-title">Chemistry in Everyday Life</h:h6>
         <h:div class="os-note-body">
                  <!--r:children selector="*[not(@data-type='title')]"-->
            <xsl:apply-templates mode="EXPAND_MODE" select="*[not(@data-type='title')]"/>
         </h:div>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='note'][@class][func:hasClass(@class, 'everyday-life')]">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e281']">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='note']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='page']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e295</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e295' is actually: //h:body//*[@data-type='chapter']//*[@data-type='page']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e295']">
            <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:link-text>
            <r:copy-content temp:id="COPY_CONTENT__d1e301"
                            selector="./*[@data-type='document-title']/node()"/>
         </r:link-text>
         <!--r:children selector=""-->
         <xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='page']">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e295']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="sectionCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='page']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='page']//*[@data-type='document-title']">
      <xsl:copy>
         <xsl:attribute name="temp:replace-id">d1e310</xsl:attribute>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--@temp:replace-id='d1e310' is actually: //h:body//*[@data-type='chapter']//*[@data-type='page']//*[@data-type='document-title']-->
   <xsl:template mode="EXPAND_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e310']">
               <!--r:this-->
      <xsl:copy>
         <xsl:apply-templates select="@*"/>
         <r:dump-counter name="chapterCounter"/>.<r:dump-counter name="sectionCounter"/>: <!--r:children selector=""--><xsl:apply-templates mode="EXPAND_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="//h:body//*[@data-type='chapter']//*[@data-type='page']//*[@data-type='document-title']">
      <xsl:variable name="this" select="."/>
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()">
            <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="$this"/>
         </xsl:apply-templates>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="*[@temp:replace-id][@temp:replace-id = 'd1e310']">
      <xsl:param tunnel="yes" name="chapterCounter"/>
      <xsl:param tunnel="yes" name="sectionCounter"/>
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*"/>
         <xsl:attribute name="temp:linktext">
            <xsl:apply-templates mode="NUMBER_MODE" select="r:link-text/node()">
               <xsl:with-param tunnel="yes" name="nearestReplacerContext" select="."/>
            </xsl:apply-templates>
         </xsl:attribute>
         <!--r:children selector="*[@data-type='document-title']"-->
         <xsl:apply-templates mode="NUMBER_MODE" select="node()"/>
      </xsl:copy>
   </xsl:template>
   <!--Preserve the tree hierarchy before things start to move around-->
   <xsl:template mode="INITIALIZE_MODE" match="*">
      <xsl:copy>
         <xsl:attribute name="temp:id" select="generate-id()"/>
         <xsl:attribute name="temp:parent" select="generate-id(..)"/>
         <xsl:apply-templates mode="INITIALIZE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <!--Identity Transform-->
   <xsl:template match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="INITIALIZE_MODE" match="@*|node()[not(self::*)]">
      <xsl:copy>
         <xsl:apply-templates mode="INITIALIZE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ANNOTATE_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="ANNOTATE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ENSURE_ID_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="ENSURE_ID_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="EXPAND_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="EXPAND_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="MOVE_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="MOVE_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="NUMBER_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="LINK_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="LINK_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ERASE_ID_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="ERASE_ID_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="CLEANUP_MODE" match="@*|node()">
      <xsl:copy>
         <xsl:apply-templates mode="CLEANUP_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="CLEANUP_MODE"
                 match="@temp:replace-id | @temp:id | @temp:parent | @temp:linktext"/>
   <xsl:template mode="NUMBER_MODE" match="r:dump-counter">
      <xsl:value-of select="accumulator-after(@name)"/>
   </xsl:template>
   <xsl:template mode="LINK_MODE" match="h:a[starts-with(@href, '#')]">
      <xsl:variable name="targetId" select="substring-after(@href, '#')"/>
      <xsl:variable name="target" select="key('link-target', $targetId)"/>
      <xsl:if test="not($target)">
         <xsl:message terminate="no">BUG: Could not find link target with id="{$targetId}". Maybe it was removed?</xsl:message>
         <xsl:text>[[UNKNOWN-LINK-TARGET]]</xsl:text>
      </xsl:if>
      <xsl:copy>
         <xsl:apply-templates mode="LINK_MODE" select="@*"/>
         <xsl:value-of select="$target[1]/@temp:linktext"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="LINK_MODE" match="r:link[@to='parent']">
      <xsl:variable name="parentId" select="ancestor::*[@temp:parent][1]/@temp:parent"/>
      <xsl:if test="not($parentId)">
         <xsl:message terminate="yes">BUG: Could not find an ancestor of this link that has a @temp:parent assigned</xsl:message>
      </xsl:if>
      <xsl:variable name="parent" select="key('internal-id', $parentId)"/>
      <xsl:if test="not($parent)">
         <xsl:message terminate="no">BUG: Could not find parent element with temp:id="{$parentId}"</xsl:message>
      </xsl:if>
      <xsl:if test="not($parent[1]/@id)">
         <xsl:message terminate="no">BUG: This parent element does not have an id attribute on it yet. </xsl:message>
      </xsl:if>
      <h:a href="#{$parent[1]/@id}">
         <xsl:if test="not($parent/@temp:linktext)">
            <xsl:message terminate="no">Link target #{$parent[1]/@id} did not have a link-text element defined for it so do not know how to render the link</xsl:message>
                    [ERRORUNKNOWNLINKTEXT]
                </xsl:if>
         <xsl:value-of select="$parent[1]/@temp:linktext"/>
      </h:a>
   </xsl:template>
   <xsl:template mode="LINK_MODE"
                 match="r:link[@to='child'][@temp:child-link-key='*[@data-type=#solution#]']">
      <xsl:variable name="children"
                    select="key('internal-parent', ancestor::*[@temp:id][1]/@temp:id)"/>
      <xsl:variable name="child" select="$children[self::*[@data-type='solution']]"/>
      <xsl:if test="not($child[1]/@id)">
         <xsl:message>{count($child)} elements out of {count($children)} children total</xsl:message>
         <xsl:message terminate="yes">This child element does not have an id attribute on it yet. *[@data-type='solution'] <xsl:copy-of select="."/>
         </xsl:message>
      </xsl:if>
      <h:a href="#{$child[1]/@id}">
         <xsl:if test="not($child/@temp:linktext)">
            <xsl:message terminate="no">Link target #{$child[1]/@id} did not have a link-text element defined for it so do not know how to render the link</xsl:message>
         </xsl:if>
         <xsl:choose>
            <xsl:when test="node()">
               <xsl:apply-templates mode="LINK_MODE" select="node()"/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:value-of select="$child[1]/@temp:linktext"/>
            </xsl:otherwise>
         </xsl:choose>
      </h:a>
   </xsl:template>
   <xsl:template mode="ENSURE_ID_MODE" match="*[not(@id)]">
      <xsl:copy>
         <xsl:attribute name="id">autogenerated-id-{generate-id(.)}</xsl:attribute>
         <xsl:apply-templates mode="ENSURE_ID_MODE" select="@*|node()"/>
      </xsl:copy>
   </xsl:template>
   <xsl:template mode="ERASE_ID_MODE" match="@id[starts-with(., 'autogenerated-id-')]">
      <xsl:variable name="href">#{.}</xsl:variable>
      <xsl:variable name="linkSource" select="key('link-source', $href)"/>
      <xsl:if test="not(empty($linkSource))">
         <xsl:copy/>
      </xsl:if>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE" match="r:link-text"/>
   <xsl:template mode="NUMBER_MODE" match="r:link-text//comment()"/>
   <xsl:template mode="MOVE_MODE"
                 match="r:dump-bucket[@temp:id='DUMP_BUCKET_solutionBucket_d1e25']">
      <xsl:param tunnel="yes" name="nearestReplacerContext" as="element()"/>
      <xsl:variable name="groups" select="$nearestReplacerContext/*[@data-type='chapter']"/>
      <xsl:comment> DUMP_BUCKET_solutionBucket_d1e25 . Found {count($groups)} groups to loop over</xsl:comment>
      <xsl:comment>nearestReplacerContext is a {local-name($nearestReplacerContext)} with data-type={$nearestReplacerContext/@data-type}</xsl:comment>
      <xsl:for-each select="$nearestReplacerContext/*[@data-type='chapter']">
         <xsl:variable name="groupEl" select="."/>
         <xsl:variable name="title" select="./*[@data-type='document-title']"/>
         <xsl:variable name="items">
            <xsl:for-each select="accumulator-after('solutionBucket')">
               <xsl:variable name="nearestGroupEl" select="ancestor::*[@data-type='chapter']"/>
               <xsl:if test="$groupEl[1] = $nearestGroupEl[1]">
                  <xsl:copy>
                     <xsl:apply-templates mode="MOVE_MODE" select="@*|node()"/>
                  </xsl:copy>
               </xsl:if>
            </xsl:for-each>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not(empty($items/*))">
               <h:div class="-i-am-a-group-by-block">
                  <h:h3>
                     <h:a href="#{temp:getId($groupEl)}">[this-will-be-replaced-with-autogen-linktext]</h:a>
                  </h:h3>
                  <xsl:sequence select="$items"/>
               </h:div>
            </xsl:when>
            <xsl:otherwise>
               <xsl:comment>Skipping group because no items matched</xsl:comment>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="r:dump-bucket[@temp:id='DUMP_BUCKET_iamapagebucket-key-equations_d1e67']">
      <xsl:comment> r:dump-bucket[@name='iamapagebucket-key-equations'][not(@group-by)] DUMP_BUCKET_iamapagebucket-key-equations_d1e67</xsl:comment>
      <xsl:for-each select="accumulator-after('iamapagebucket-key-equations')">
         <xsl:copy>
            <xsl:apply-templates mode="MOVE_MODE" select="@*|node()"/>
         </xsl:copy>
      </xsl:for-each>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="r:dump-bucket[@temp:id='DUMP_BUCKET_iamapagebucket-summary_d1e74']">
      <xsl:param tunnel="yes" name="nearestReplacerContext" as="element()"/>
      <xsl:variable name="groups" select="$nearestReplacerContext/*[@data-type='page']"/>
      <xsl:comment> DUMP_BUCKET_iamapagebucket-summary_d1e74 . Found {count($groups)} groups to loop over</xsl:comment>
      <xsl:comment>nearestReplacerContext is a {local-name($nearestReplacerContext)} with data-type={$nearestReplacerContext/@data-type}</xsl:comment>
      <xsl:for-each select="$nearestReplacerContext/*[@data-type='page']">
         <xsl:variable name="groupEl" select="."/>
         <xsl:variable name="title" select="./*[@data-type='document-title']"/>
         <xsl:variable name="items">
            <xsl:for-each select="accumulator-after('iamapagebucket-summary')">
               <xsl:variable name="nearestGroupEl" select="ancestor::*[@data-type='page']"/>
               <xsl:if test="$groupEl[1] = $nearestGroupEl[1]">
                  <xsl:copy>
                     <xsl:apply-templates mode="MOVE_MODE" select="@*|node()"/>
                  </xsl:copy>
               </xsl:if>
            </xsl:for-each>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not(empty($items/*))">
               <h:div class="-i-am-a-group-by-block">
                  <h:h3>
                     <h:a href="#{temp:getId($groupEl)}">[this-will-be-replaced-with-autogen-linktext]</h:a>
                  </h:h3>
                  <xsl:sequence select="$items"/>
               </h:div>
            </xsl:when>
            <xsl:otherwise>
               <xsl:comment>Skipping group because no items matched</xsl:comment>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
   </xsl:template>
   <xsl:template mode="MOVE_MODE"
                 match="r:dump-bucket[@temp:id='DUMP_BUCKET_iamapagebucket-exercises_d1e81']">
      <xsl:param tunnel="yes" name="nearestReplacerContext" as="element()"/>
      <xsl:variable name="groups" select="$nearestReplacerContext/*[@data-type='page']"/>
      <xsl:comment> DUMP_BUCKET_iamapagebucket-exercises_d1e81 . Found {count($groups)} groups to loop over</xsl:comment>
      <xsl:comment>nearestReplacerContext is a {local-name($nearestReplacerContext)} with data-type={$nearestReplacerContext/@data-type}</xsl:comment>
      <xsl:for-each select="$nearestReplacerContext/*[@data-type='page']">
         <xsl:variable name="groupEl" select="."/>
         <xsl:variable name="title" select="./*[@data-type='document-title']"/>
         <xsl:variable name="items">
            <xsl:for-each select="accumulator-after('iamapagebucket-exercises')">
               <xsl:variable name="nearestGroupEl" select="ancestor::*[@data-type='page']"/>
               <xsl:if test="$groupEl[1] = $nearestGroupEl[1]">
                  <xsl:copy>
                     <xsl:apply-templates mode="MOVE_MODE" select="@*|node()"/>
                  </xsl:copy>
               </xsl:if>
            </xsl:for-each>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="not(empty($items/*))">
               <h:div class="-i-am-a-group-by-block">
                  <h:h3>
                     <h:a href="#{temp:getId($groupEl)}">[this-will-be-replaced-with-autogen-linktext]</h:a>
                  </h:h3>
                  <xsl:sequence select="$items"/>
               </h:div>
            </xsl:when>
            <xsl:otherwise>
               <xsl:comment>Skipping group because no items matched</xsl:comment>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:for-each>
   </xsl:template>
   <xsl:template mode="NUMBER_MODE"
                 match="r:copy-content[@temp:id='COPY_CONTENT__d1e301']">
      <xsl:param tunnel="yes" name="nearestReplacerContext" as="element()"/>
      <xsl:apply-templates mode="NUMBER_MODE"
                           select="$nearestReplacerContext/./*[@data-type='document-title']/node()"/>
   </xsl:template>
   <xsl:template mode="INITIALIZE_MODE" match="h:head[not(h:style)]">
      <xsl:copy>
         <xsl:apply-templates mode="INITIALIZE_MODE" select="@*|node()"/>
         <style>
                    /* Debug-styling-to-make-it-easier-to-inspect */
                    :target {{ background-color: #ffc; }}
                    section, div, p[data-type="solution"] {{
                        border: 1px dotted #ccc;
                        margin: 1rem;
                    }}
                </style>
      </xsl:copy>
   </xsl:template>
   <xsl:function name="temp:getId" as="xs:string">
      <xsl:param name="context" as="element()"/>
      <xsl:choose>
         <xsl:when test="$context/@id">
            <xsl:value-of select="$context/@id"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:message terminate="yes">BUG: Found an element that does not have an id attribute. {local-name($context)} data-type={$context/@data-type}</xsl:message>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:function>
   <xsl:function name="func:hasClass" as="xs:boolean">
      <xsl:param name="class" as="xs:string"/>
      <xsl:param name="className" as="xs:string"/>
      <xsl:sequence select="fn:exists(fn:index-of(fn:tokenize($class, '\s+'), $className))"/>
   </xsl:function>
</xsl:transform>
